name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g. v0.1.0)'
        required: true
        default: 'v0.1.0'

# Add permissions block for GITHUB_TOKEN
permissions:
  contents: write
  discussions: write

jobs:
  create_release:
    name: Create Release
    # Only run when a tag is pushed or on manual workflow dispatch
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Remove refs/tags/ prefix
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # Check if version starts with v and followed by numbers and dots
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
          echo "::error::Invalid version format: $VERSION. Version must start with 'v' followed by semantic version (e.g. v1.2.3)"
          exit 1
        fi
        
        echo "Version format is valid: $VERSION"
    
    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ steps.get_version.outputs.version }}',
            name: 'Release ${{ steps.get_version.outputs.version }}',
            draft: true,
            prerelease: false,
            body: `## RCP Client ${{ steps.get_version.outputs.version }}
            
            Please refer to [CHANGELOG.md](https://github.com/open-rcp/rcp_client/blob/main/CHANGELOG.md) for detailed changes.
            
            ### Downloads
            
            #### Android
            - \`rcp-client-android.apk\`: Android application package
            
            #### iOS
            - \`rcp-client-ios.ipa\`: iOS application archive (requires Apple Developer Account to install)
            
            #### macOS
            - \`rcp-client-macos.dmg\`: macOS disk image with application bundle
            
            #### Windows
            - \`rcp-client-windows.zip\`: Windows executable with required DLLs
            
            #### Linux
            - \`rcp-client-linux.tar.gz\`: Linux application bundle`
          });
          
          core.setOutput('upload_url', release.upload_url);
          return release;

  build_android:
    name: Build Android Release
    needs: create_release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Install Android Rust targets
      run: |
        rustup target add armv7-linux-androideabi
        rustup target add aarch64-linux-android
        rustup target add i686-linux-android
        rustup target add x86_64-linux-android
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build APK
      run: flutter build apk --release
    
    - name: Rename APK
      run: cp build/app/outputs/flutter-apk/app-release.apk rcp-client-android.apk
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(r => r.tag_name === '${{ needs.create_release.outputs.version }}');
          
          if (!release) {
            core.setFailed(`No release found with tag: ${{ needs.create_release.outputs.version }}`);
            return;
          }
          
          console.log(`Uploading rcp-client-android.apk...`);
          
          try {
            // Read file as binary
            const fileContent = fs.readFileSync('./rcp-client-android.apk');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'rcp-client-android.apk',
              data: fileContent,
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': fs.statSync('./rcp-client-android.apk').size
              }
            });
            
            console.log(`Successfully uploaded rcp-client-android.apk`);
          } catch (error) {
            console.error(`Failed to upload rcp-client-android.apk: ${error.message}`);
            core.warning(`Failed to upload rcp-client-android.apk: ${error.message}`);
          }

  build_ios:
    name: Build iOS Release
    needs: create_release
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Install iOS Rust targets
      run: |
        rustup target add aarch64-apple-ios
        rustup target add x86_64-apple-ios
    
    - name: Install dependencies
      run: |
        flutter pub get
        cd ios && pod install
    
    - name: Build iOS
      run: flutter build ios --release --no-codesign
    
    # Note: Full IPA packaging requires Apple Developer certificates
    # This is a simplified version for creating an unsigned IPA
    - name: Create IPA Package
      run: |
        mkdir -p Payload
        cp -R build/ios/iphoneos/Runner.app Payload/
        zip -r rcp-client-ios.ipa Payload
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(r => r.tag_name === '${{ needs.create_release.outputs.version }}');
          
          if (!release) {
            core.setFailed(`No release found with tag: ${{ needs.create_release.outputs.version }}`);
            return;
          }
          
          console.log(`Uploading rcp-client-ios.ipa...`);
          
          try {
            // Read file as binary
            const fileContent = fs.readFileSync('./rcp-client-ios.ipa');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'rcp-client-ios.ipa',
              data: fileContent,
              headers: {
                'content-type': 'application/octet-stream',
                'content-length': fs.statSync('./rcp-client-ios.ipa').size
              }
            });
            
            console.log(`Successfully uploaded rcp-client-ios.ipa`);
          } catch (error) {
            console.error(`Failed to upload rcp-client-ios.ipa: ${error.message}`);
            core.warning(`Failed to upload rcp-client-ios.ipa: ${error.message}`);
          }

  build_macos:
    name: Build macOS Release
    needs: create_release
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Install macOS Rust targets
      run: |
        rustup target add aarch64-apple-darwin
        rustup target add x86_64-apple-darwin
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build macOS App
      run: flutter build macos --release
    
    - name: Create macOS App Bundle
      run: ./build_macos.sh
    
    - name: Create DMG
      run: |
        # Install create-dmg if not already installed
        brew install create-dmg || true
        
        # Create DMG from the app bundle
        create-dmg \
          --volname "RCP Client" \
          --volicon "macos/Runner/Assets.xcassets/AppIcon.appiconset/app_icon_1024.png" \
          --window-pos 200 120 \
          --window-size 800 450 \
          --icon-size 100 \
          --app-drop-link 600 185 \
          "rcp-client-macos.dmg" \
          "build/macos/Build/Products/Release/rcp_client.app"
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(r => r.tag_name === '${{ needs.create_release.outputs.version }}');
          
          if (!release) {
            core.setFailed(`No release found with tag: ${{ needs.create_release.outputs.version }}`);
            return;
          }
          
          console.log(`Uploading rcp-client-macos.dmg...`);
          
          try {
            // Read file as binary
            const fileContent = fs.readFileSync('./rcp-client-macos.dmg');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'rcp-client-macos.dmg',
              data: fileContent,
              headers: {
                'content-type': 'application/x-apple-diskimage',
                'content-length': fs.statSync('./rcp-client-macos.dmg').size
              }
            });
            
            console.log(`Successfully uploaded rcp-client-macos.dmg`);
          } catch (error) {
            console.error(`Failed to upload rcp-client-macos.dmg: ${error.message}`);
            core.warning(`Failed to upload rcp-client-macos.dmg: ${error.message}`);
          }

  build_windows:
    name: Build Windows Release
    needs: create_release
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Install Windows Rust targets
      run: |
        rustup target add x86_64-pc-windows-msvc
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build Windows App
      run: flutter build windows --release
    
    - name: Package Windows App
      run: |
        mkdir -p rcp-client-windows
        # First check if files exist
        if (Test-Path -Path "build\windows\runner\Release\*") {
            Write-Host "Found Windows build files, copying..."
            # Use robocopy instead of xcopy for better error handling
            robocopy "build\windows\runner\Release" "rcp-client-windows" /E
            # robocopy returns non-zero exit codes for successful operations with details
            # 0-7 are generally successful, 8+ indicate errors
            if ($LASTEXITCODE -lt 8) {
                Write-Host "Files copied successfully"
                $LASTEXITCODE = 0  # Reset exit code to success
            }
        } else {
            Write-Host "No build files found at build\windows\runner\Release"
            Get-ChildItem -Path "build\windows" -Recurse | ForEach-Object {
                Write-Host $_.FullName
            }
            exit 1
        }
        
        # Create zip archive
        Compress-Archive -Path "rcp-client-windows\*" -DestinationPath rcp-client-windows.zip
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(r => r.tag_name === '${{ needs.create_release.outputs.version }}');
          
          if (!release) {
            core.setFailed(`No release found with tag: ${{ needs.create_release.outputs.version }}`);
            return;
          }
          
          console.log(`Uploading rcp-client-windows.zip...`);
          
          try {
            // Read file as binary
            const fileContent = fs.readFileSync('./rcp-client-windows.zip');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'rcp-client-windows.zip',
              data: fileContent,
              headers: {
                'content-type': 'application/zip',
                'content-length': fs.statSync('./rcp-client-windows.zip').size
              }
            });
            
            console.log(`Successfully uploaded rcp-client-windows.zip`);
          } catch (error) {
            console.error(`Failed to upload rcp-client-windows.zip: ${error.message}`);
            core.warning(`Failed to upload rcp-client-windows.zip: ${error.message}`);
          }

  build_linux:
    name: Build Linux Release
    needs: create_release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.29.3'
        channel: 'stable'
        cache: true
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
        
    - name: Install Linux Rust targets
      run: |
        rustup target add x86_64-unknown-linux-gnu
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libblkid-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsqlite3-dev pkg-config ninja-build clang cmake
    
    - name: Install dependencies
      run: flutter pub get
    
    - name: Build Linux App
      run: flutter build linux --release
    
    - name: Package Linux App
      run: |
        mkdir -p rcp-client-linux
        cp -R build/linux/x64/release/bundle/* rcp-client-linux/
        tar -czf rcp-client-linux.tar.gz rcp-client-linux
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const release = releases.find(r => r.tag_name === '${{ needs.create_release.outputs.version }}');
          
          if (!release) {
            core.setFailed(`No release found with tag: ${{ needs.create_release.outputs.version }}`);
            return;
          }
          
          console.log(`Uploading rcp-client-linux.tar.gz...`);
          
          try {
            // Read file as binary
            const fileContent = fs.readFileSync('./rcp-client-linux.tar.gz');
            
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              name: 'rcp-client-linux.tar.gz',
              data: fileContent,
              headers: {
                'content-type': 'application/gzip',
                'content-length': fs.statSync('./rcp-client-linux.tar.gz').size
              }
            });
            
            console.log(`Successfully uploaded rcp-client-linux.tar.gz`);
          } catch (error) {
            console.error(`Failed to upload rcp-client-linux.tar.gz: ${error.message}`);
            core.warning(`Failed to upload rcp-client-linux.tar.gz: ${error.message}`);
          }

  publish_release:
    name: Publish Release
    needs: [create_release, build_android, build_ios, build_macos, build_windows, build_linux]
    runs-on: ubuntu-latest
    if: ${{ !failure() && !cancelled() }}
    steps:
      - name: Finalize GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // For workflow_dispatch events, use the specified version
            // For tag events, extract the tag name from GITHUB_REF
            let versionTag = '${{ needs.create_release.outputs.version }}';
            
            // Make sure the version tag doesn't include 'refs/tags/' prefix
            if (versionTag.startsWith('refs/tags/')) {
              versionTag = versionTag.replace('refs/tags/', '');
            }
            
            console.log(`Looking for draft release with tag: ${versionTag}`);
            
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 10
            });
            
            // Find the draft release with matching tag
            const draftRelease = releases.find(release => 
              release.draft === true && 
              release.tag_name === versionTag
            );
            
            if (draftRelease) {
              console.log(`Finalizing release id: ${draftRelease.id}`);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: draftRelease.id,
                draft: false
              });
              console.log(`Successfully finalized release: ${versionTag}`);
            } else {
              console.log(`No matching draft release found for tag: ${versionTag}`);
              console.log('Available releases:');
              releases.forEach(release => {
                console.log(`- ${release.tag_name} (Draft: ${release.draft})`);
              });
            }
