name: Build and Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      platforms:
        description: 'Platforms to build (comma-separated: macos,windows,linux,android,ios,all)'
        required: false
        default: 'all'
  push:
    tags: ['v*']

jobs:
  setup:
    name: Setup and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run analyzer
        run: flutter analyze --no-fatal-infos
      
      - name: Run tests
        run: flutter test
      
      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          else
            # Extract version from tag name
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

  build-rust-bridge:
    name: Build Rust Bridge
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "rust -> target, rust_bridge -> target"
          cache-on-failure: true
          shared-key: "rust-bridge-${{ hashFiles('**/Cargo.lock') }}"
      
      # Try to reuse the previously built rust bridge from CI
      - name: Check rust-bridge cache
        id: rust-bridge-cache
        uses: actions/cache@v3
        with:
          path: build/native_assets
          key: rust-bridge-${{ runner.os }}-${{ hashFiles('rust_bridge/**/*.rs', 'rust_bridge/**/*.toml', 'rust_bridge/Cargo.lock', 'scripts/build/build_rust_bridge.sh') }}
          restore-keys: |
            rust-bridge-${{ runner.os }}-
      
      - name: Run clippy
        working-directory: ./rust_bridge
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Check formatting
        working-directory: ./rust_bridge
        run: cargo fmt --all -- --check
      
      - name: Build rust bridge (default target)
        if: steps.rust-bridge-cache.outputs.cache-hit != 'true'
        run: ./scripts/build/build_rust_bridge.sh
      
      - name: Archive rust bridge
        uses: actions/upload-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    needs: [setup, build-rust-bridge]
    if: ${{ !github.event.inputs.platforms || contains(github.event.inputs.platforms, 'macos') || github.event.inputs.platforms == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install macOS Rust targets
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-ios
          rustup target add x86_64-apple-ios
      
      - name: Download rust bridge
        uses: actions/download-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
      
      - name: Setup CI environment
        run: |
          chmod +x ./ci/setup_ci.sh
          ./ci/setup_ci.sh
      
      - name: Install dependencies
        run: |
          flutter pub get
      
      - name: Copy native libraries
        run: |
          chmod +x ./scripts/build/copy_native_libs.sh
          ./scripts/build/copy_native_libs.sh
      
      - name: Build macOS app
        run: |
          chmod +x ./scripts/build/build_macos.sh
          ./scripts/build/build_macos.sh
      
      - name: Archive macOS build
        uses: actions/upload-artifact@v4
        with:
          name: rcp-client-macos
          path: build/macos/Build/Products/Release/rcp_client.app
  
  build-windows:
    runs-on: windows-latest
    needs: [setup, build-rust-bridge]
    if: ${{ !github.event.inputs.platforms || contains(github.event.inputs.platforms, 'windows') || github.event.inputs.platforms == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install Windows Rust targets
        run: |
          rustup target add x86_64-pc-windows-msvc
      
      - name: Setup Visual Studio tools
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Download rust bridge
        uses: actions/download-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
      
      - name: Install dependencies
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
      
      - name: Copy native libraries
        shell: bash
        run: |
          chmod +x ./scripts/build/copy_native_libs.sh
          ./scripts/build/copy_native_libs.sh
      
      - name: Build Windows application
        shell: bash
        run: |
          chmod +x ./scripts/build/build_windows.sh
          ./scripts/build/build_windows.sh
      
      - name: Archive Windows build
        uses: actions/upload-artifact@v4
        with:
          name: rcp-client-windows
          path: rcp-client-windows/
          
  build-linux:
    runs-on: ubuntu-latest
    needs: [setup, build-rust-bridge]
    if: ${{ !github.event.inputs.platforms || contains(github.event.inputs.platforms, 'linux') || github.event.inputs.platforms == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install Linux Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
      
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libblkid-dev liblzma-dev libsecret-1-dev libjsoncpp-dev libsqlite3-dev pkg-config ninja-build clang cmake
      
      - name: Download rust bridge
        uses: actions/download-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
      
      - name: Install dependencies
        run: |
          flutter config --enable-linux-desktop
          flutter pub get
      
      - name: Copy native libraries
        run: |
          chmod +x ./scripts/build/copy_native_libs.sh
          ./scripts/build/copy_native_libs.sh
      
      - name: Build Linux application
        run: |
          if [ -f "./scripts/build/build_linux.sh" ]; then
            chmod +x ./scripts/build/build_linux.sh
            ./scripts/build/build_linux.sh
          else
            flutter build linux --release
          fi
      
      - name: Package Linux build
        run: |
          mkdir -p rcp-client-linux
          cp -r build/linux/x64/release/bundle/* rcp-client-linux/
          # Add launcher script
          echo '#!/bin/bash' > rcp-client-linux/launch.sh
          echo 'cd "$(dirname "$0")"' >> rcp-client-linux/launch.sh
          echo './rcp_client' >> rcp-client-linux/launch.sh
          chmod +x rcp-client-linux/launch.sh
      
      - name: Archive Linux build
        uses: actions/upload-artifact@v4
        with:
          name: rcp-client-linux
          path: rcp-client-linux/
          
  build-android:
    runs-on: ubuntu-latest
    needs: [setup, build-rust-bridge]
    if: ${{ !github.event.inputs.platforms || contains(github.event.inputs.platforms, 'android') || github.event.inputs.platforms == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Install Android NDK
        run: |
          sdkmanager --install "ndk;25.2.9519653" "cmake;3.22.1"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
      
      - name: Install Android Rust targets
        run: |
          rustup target add aarch64-linux-android
          rustup target add armv7-linux-androideabi
          rustup target add x86_64-linux-android
          rustup target add i686-linux-android
      
      - name: Setup cargo-ndk
        run: |
          cargo install cargo-ndk
      
      - name: Download rust bridge
        uses: actions/download-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
      
      - name: Install dependencies
        run: |
          flutter pub get
      
      - name: Build Android AAR/JNI libraries manually
        run: |
          cd rust_bridge
          # Set up Android build environment
          export ANDROID_NDK_HOME="${ANDROID_NDK_HOME:-$ANDROID_SDK_ROOT/ndk/25.2.9519653}"
          export PATH=$PATH:$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
          
          # Build for all the needed architectures using cargo-ndk with explicit NDK configuration
          # The cargo-ndk tool handles cross-compilation correctly
          cargo ndk -t arm64-v8a -t armeabi-v7a -t x86_64 -t x86 \
            --platform 33 \
            -o ../android/app/src/main/jniLibs build --release
          cd ..
      
      - name: Copy native libraries (if needed)
        run: |
          if [ -f "./scripts/build/copy_native_libs.sh" ]; then
            chmod +x ./scripts/build/copy_native_libs.sh
            ./scripts/build/copy_native_libs.sh
          fi
      
      - name: Build Android APK
        run: |
          if [ -f "./scripts/build/build_android.sh" ]; then
            chmod +x ./scripts/build/build_android.sh
            ./scripts/build/build_android.sh
          else
            flutter build apk --release --split-per-abi
          fi
      
      - name: Archive Android build
        uses: actions/upload-artifact@v4
        with:
          name: rcp-client-android
          path: build/app/outputs/apk/release/
          retention-days: 7
          
  build-ios:
    runs-on: macos-latest
    needs: [setup, build-rust-bridge]
    if: ${{ !github.event.inputs.platforms || contains(github.event.inputs.platforms, 'ios') || github.event.inputs.platforms == 'all' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.3'
          cache: true
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install iOS Rust targets
        run: |
          rustup target add aarch64-apple-ios
          rustup target add x86_64-apple-ios
      
      - name: Download rust bridge
        uses: actions/download-artifact@v4
        with:
          name: rust-bridge-lib
          path: build/native_assets/
      
      - name: Install dependencies
        run: |
          flutter pub get
          cd ios && pod install && cd ..
      
      - name: Copy native libraries (if needed)
        run: |
          if [ -f "./scripts/build/copy_native_libs.sh" ]; then
            chmod +x ./scripts/build/copy_native_libs.sh
            ./scripts/build/copy_native_libs.sh
          fi
      
      - name: Update signing configuration
        run: |
          # Create a temporary export options plist for non-signed builds
          cat > ios/ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>compileBitcode</key>
            <false/>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.example.rcpClient</key>
              <string>iOS Team Provisioning Profile: com.example.rcpClient</string>
            </dict>
          </dict>
          </plist>
          EOF
      
      - name: Build iOS app
        run: |
          if [ -f "./scripts/build/build_ios.sh" ]; then
            chmod +x ./scripts/build/build_ios.sh
            ./scripts/build/build_ios.sh
          else
            flutter build ios --release --no-codesign
          fi
      
      - name: Archive iOS build
        uses: actions/upload-artifact@v4
        with:
          name: rcp-client-ios
          path: build/ios/iphoneos/
          retention-days: 7
          
  create-release:
    needs: [setup, build-macos, build-windows, build-linux, build-android, build-ios]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          prev_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$prev_tag" ]; then
            prev_tag="HEAD~100"
            echo "No previous tag found, using earliest commits"
          fi
          
          echo "## Changes in ${{ needs.setup.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Features
          echo "### Features" >> RELEASE_NOTES.md
          git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^feat\|^add" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No new features in this release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Bug fixes
          echo "### Bug Fixes" >> RELEASE_NOTES.md
          git log $prev_tag..HEAD --pretty=format:"- %s" --grep="^fix" | grep -v "^$" | sort >> RELEASE_NOTES.md || echo "- No bug fixes in this release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          cat RELEASE_NOTES.md
          
      - name: Create ZIP archives
        run: |
          cd artifacts/rcp-client-macos
          zip -r ../../rcp-client-macos.zip .
          cd ../rcp-client-windows  
          zip -r ../../rcp-client-windows.zip .
          cd ../rcp-client-linux
          zip -r ../../rcp-client-linux.zip .
          
          # Package Android APKs
          mkdir -p ../rcp-client-android-packaged
          cp -r ../rcp-client-android/* ../rcp-client-android-packaged/
          cd ../rcp-client-android-packaged
          zip -r ../../../rcp-client-android.zip .
          
          # Package iOS build
          cd ../rcp-client-ios
          zip -r ../../../rcp-client-ios.zip .
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            rcp-client-macos.zip
            rcp-client-windows.zip
            rcp-client-linux.zip
            rcp-client-android.zip
            rcp-client-ios.zip
          body_path: RELEASE_NOTES.md
          draft: true
          tag_name: ${{ needs.setup.outputs.version }}
